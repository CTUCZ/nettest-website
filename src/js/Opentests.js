/*******************************************************************************
 * Copyright 2015-2017 Thomas Schreiber
 * Copyright 2015-2020 Rundfunk und Telekom Regulierungs-GmbH (RTR-GmbH)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

"use strict";
/* 
 * Script for loading test results from ONE test (only open-data content)
 * Used only by Opentest.html
 */

var color_for_speed_graph = "#59b200"; //or green: #00CC00
var color_for_speed_graph_upload = "#0080C1"; //or green: #00CC00
var color_for_ping_graph = "#D19010"; //D19010
var histogramCanvasHeight = 200; //px
var histogramEnabled = true;
var mapEnabled = true;
var histogramClickableThreshold = 20; //at least X entries for a part in the histogram to be clickable

/* Enable or disable lazy loading of more search results
 * as the user scrolls to the bottom of the window */
var enableLazyLoading = true;
var enableAutoRefreshing = true; //automatically load new tests while visiting the site
var autoRefreshingInterval = 15000; //in ms
var maxResults = 400;

var bootstrap_datepicker_path = '/lib/bootstrap-datepicker/';
var bootstrap_timepicker_path = '/lib/bootstrap-timepicker/';

/* Standard values for the dropbown-fields in the advanced search */
//var possibleNetworkTypes = ["1xRTT","2G/3G","2G/3G/4G","2G/4G","3G/4G","CDMA","CELLULAR_ANY","CLI","EDGE","EHRPD","EVDO_0","EVDO_A","EVDO_B","GSM","HSDPA","HSPA","HSPA+","HSUPA","IDEN","LAN","LTE","UMTS","WLAN"];
var possibleClientVersions = [[["0.3"],["0.3"]],[["0.8"],["0.8.*"]],[["0.9"],["0.9.*"]],["1.0","1.0"],[["1.1"],["1.1"]],[["1.2"],["1.2*"]],[["1.3"],["1.3*"]],[["1.4"],["1.4*"]],[["1.5"],["1.5*"]],[["2.0"],["2.0*"],[["3.0","3.*"]]]];
var possibleConnectionTypes = ["2G","2G/3G","2G/3G/4G","2G/4G","3G","3G/4G","4G","5G","CLI","LAN","MOBILE","WLAN"];
var possibleLandCoverValues = [111, 112, 121, 122, 123, 124, 131, 132, 133, 141, 142, 211, 212, 213, 221, 222, 223, 231, 241, 242, 243, 244, 311, 312, 313, 321, 322, 323, 324, 331, 332, 333, 334, 335, 411, 412, 421, 422, 423, 511, 512, 521, 522, 523];

var useSessionStorage = false;

$(document).ready(function() {
    
    //load filter from address bar
    var filter;
    if (window.location.href.indexOf('?')>0) {
        filter = window.location.href.substr(window.location.href.indexOf('?'));
        //remove hashes
        if (filter.indexOf("#") > 0) {
            filter = filter.substr(0,filter.indexOf("#"));
        }
        
        if (userServerSelection > 0) {
            filter += "&user_server_selection=" + userServerSelection;
        }
    } else {
        filter = "";
        if (window.sessionStorage.getItem("opentests_query") !== null) {
            filter = "?" + window.sessionStorage.getItem("opentests_query");
            window.sessionStorage.removeItem("opentests_query");
            useSessionStorage = true;
        }

        if (userServerSelection > 0) {
            filter += "?user_server_selection=" + userServerSelection;
        }
    }

    var triggerDownloadForm = function(format) {
        $("#download-link-form input").remove();
        if (filter !== "") {

            var parts = filter.split('?');
            var params = parts[1].split('&');
            var pp, inputs = '';
            for (var i = 0, n = params.length; i < n; i++) {
                pp = params[i].split('=');
                inputs += '<input type="hidden" name="' + decodeURIComponent(pp[0]) + '" value="' + decodeURIComponent(pp[1]) + '" />';
            }
            $("#download-link-form").append(inputs);
        }
        $("#download-link-form").append("<input type='hidden' name='format' value='" + format + "' />");
        $("#download-link-form").append("<input type='hidden' name='max_results' value='" + currentlyDisplayedResults + "' />");
        $("#download-link-form").attr("action", statisticProxy + "/" + statisticpath + "/opentests/search");
        $("#download-link-form").submit();
    };

    //bind csv link - http://stackoverflow.com/a/27208677
    $("#csv-link").click(function (e) {
        triggerDownloadForm("csv");
        e.preventDefault();
        return false;
    });

    $("#xlsx-link").click(function (e) {
        triggerDownloadForm("xlsx");
        e.preventDefault();
        return false;
    });


    loadTestsByFilter(filter); //start loading tests async
    if (histogramEnabled) {
        $("#histograms-accordion").one("click",function(){
            loadHistograms(filter, "download"); //start loading histograms
            loadHistograms(filter, "upload"); //start loading histograms
            loadHistograms(filter, "ping"); //start loading histograms
        });
    }
    if (mapEnabled) {
        $("#map-accordion").one("shown",function(){
            map.updateSize();
            panMapToShowTests();
        });
        initializeMap();
    }
    loadPossibleFilterValues(); //load values for filter-dropdowns
    loadParametersFromUrl(filter); //load selected filters for search in the search-form
    bindTabs(filter);

    $("#intraday-accordion").one("click", function () {
        loadIntraday(filter);
    });


    //add "selectize" control
    $("select.form-control").selectize();
    
    //bind change events for time interval form fields
    $("#time_interval, #dateB, #timeB").change(function() {
        adjustBeginDateFromPeriod();
    });
    adjustBeginDateFromPeriod();
    $("#dateA").change(function() {
        $("#time_interval_count")[0].selectize.setValue("");
        $("#time_interval_type")[0].selectize.setValue("");
    });

    //set up date fields
    /*Modernizr.load({
        test: Modernizr.inputtypes.date,
        nope: [bootstrap_datepicker_path + 'bootstrap-datepicker.min.js',
            bootstrap_datepicker_path + 'bootstrap-datepicker.de.min.js',
            bootstrap_datepicker_path + 'bootstrap-datepicker3.standalone.min.css'],
        yep: function () {
            //disable jquery ui datepicker
            $('input[type=date]').datepicker('disable');
        },
        complete: function () {
            //enable bootstrap datepicker
            $('input[type=date]').datepicker({
                language: selectedLanguage,
                format: "yyyy-mm-dd",
                todayHighlight: true,
                autoclose: true
            });
        }
    });
    //set up time fields
    Modernizr.load({
        test: Modernizr.inputtypes.time,
        nope: [bootstrap_timepicker_path + 'js/bootstrap-timepicker.js',
            bootstrap_timepicker_path + 'css/bootstrap-timepicker.min.css'],
        yep: function () {
            //nothing to do
        },
        complete: function () {
            //enable bootstrap timepicker
            $('input[type=time]').timepicker({
               defaultTime: false,
               showMeridian: false,
               maxHours: 24,
               template: false,
               showSeconds: true
            });
        }
    });*/
    
    
    $(window).resize(function() {
        adjustTablesToWindowSize();
    });
    
    //open specific sections if requested
    if (window.location.hash) {
        if (window.location.hash.indexOf("map-accordion")>=0) {
            window.setTimeout(function() {
              $("#map-accordion div[data-control]").trigger('accordion');  
            },1);
        }
    }
});


var currentlyDisplayedResults = 0; //incremented with each call when lazy-loading is enabled
var currentFirstTestUUID = null;
function loadTestsByFilter(filter) {
    //this should take longer => inform the user that the system is working
    $('#spinner').spin('modal');
    
    //add maxresults to the filter
    if (filter.length > 0) {
        if (filter.indexOf("max_results") === -1) {
            filter += "&max_results=" + maxResults;
        }
    }
    else {
        filter = "?max_results=" + maxResults;
    }
    
    //add download classification
    filter += "&additional_info%5B%5D=download_classification&additional_info%5B%5D=signal_classification";
    
    $.ajax({
        url: statisticProxy + "/" + statisticpath + "/opentests/search" + filter,
        type: 'GET',
        dataType: 'json',
        cache: false,
        statusCode: {
            404: function(data) {
                //remove the spinner
                //by calling the same function that invoked it
                $('#spinner').spin('modal');
            },
            400: function(data) {
                //remove the spinner
                //by calling the same function that invoked it
                $('#spinner').spin('modal');
                alert("invalid parameter");
            }
        },
        success: function(data) {
            //for each opentest in the "openTests"-table
            var tests = data.results;
            for (var i = 0; i < tests.length; i++) {
                 $("#verlauf").append(getOpenDataRow(tests[i]));
                 
                 //add to map
                 if (mapEnabled) {
                     addTestToMap(tests[i]);
                 }
            }
            if (mapEnabled) {
                panMapToShowTests();
            }
            
            
            //fill #results
            currentlyDisplayedResults += data.results.length;
            $("#number-of-results").html(currentlyDisplayedResults + "");
            
            //link table rows
            $('#verlauf tr').click( function() {
                window.location = $(this).find('a').first().attr('href');
            });
            
            //make link to the next page
            if (data.next_cursor !== null) {
                var href=window.location.href;
                //remove hashes
                if (window.location.hash) {
                    href = href.substr(0,href.indexOf("#"));
                }
                
                var newcursor = "cursor=" + data.next_cursor;
                if (href.indexOf("cursor")>0)
                    href= href.replace(/cursor=[0-9]*/g,newcursor)
                else {
                    if (href.indexOf("?") > 0)
                        href=href + "&" + newcursor;
                    else
                        href=href + "?" + newcursor;
                }

                //fill in the link
                $("#next-result-page").attr("href",href);

                $("#number-of-results").prepend("> ");
            } else {
                //remove the page-link
                $("#next-result-page").remove();
            }
            
            
            //remove the spinner
            //by calling the same function that invoked it
            $('#spinner').spin('modal');
            
            //if there are no results => inform the user
            if (data.results.length === 0) {
                $("#verlauf").hide();
            }

            //register function for lazy-loading new tests
            var scrollTarget = window;//(userServerSelection > 0) ? window : "div.scroller";
            var innerScrollTarget ="body";//(userServerSelection > 0) ? document : "div.scroller-inner";
            $(scrollTarget).scroll(function() {
                //allow for some error margin (since WebKit uses float values on HiDPI monitors)
                if (Math.abs($(scrollTarget).scrollTop() - ($(innerScrollTarget).height() - $(scrollTarget).height())) < 5) {
                    //unbind (only execute once)
                    $(scrollTarget).unbind('scroll');
                    
                    //only if there are more results
                    if (data.next_cursor === null || !enableLazyLoading) 
                        return;
                    
                    //set cursor
                    filter = setURLParameter("cursor", data.next_cursor, filter);
                    loadTestsByFilter(filter);
                }
            });

            //automatically load new tests as they arrive
            if (enableAutoRefreshing && getURLParameter("sort_order") === "null" && data.results.length > 0) {
                //only execute on first page load
                if (currentFirstTestUUID === null) {
                    currentFirstTestUUID = data.results[0].open_test_uuid;
                    var automaticReload = function() {
                        var originalFilter = filter; //remember original filter

                        window.setInterval(function () {
                            $.ajax({
                                url: statisticProxy + "/" + statisticpath + "/opentests/search" + originalFilter,
                                type: 'GET',
                                dataType: 'json',
                                cache: false,
                                success: function (data) {
                                    if (data.results.length > 0) {
                                        var newResults = 0;
                                        $.each(data.results, function (i, test) {
                                            //if we reached the current test -> break!
                                            if (test.open_test_uuid === currentFirstTestUUID) {
                                                return false;
                                            }
                                            $("#verlauf").prepend(getOpenDataRow(test));
                                            
                                            //add to map
                                            if (mapEnabled) {
                                                addTestToMap(test);
                                            }
                                            newResults++;
                                        });
                                        currentFirstTestUUID = data.results[0].open_test_uuid;

                                        //fill #results
                                        currentlyDisplayedResults += newResults;
                                        $("#number-of-results").html(currentlyDisplayedResults + "");
                                    }
                                }
                            });
                        }, autoRefreshingInterval);
                    }();
                }
            }
            
            adjustTablesToWindowSize();
            
            //remove min-height that prevented user browser from scrolling to top
            //when handling back button (#250)
            $(".testdata-content").removeClass("initial-placeholder");
        }
    });
}

function showOpenUuid() {
    $("#verlauf tr").each(function(row) {
        if ($(this).find('.test-platform .open-test-uuid').length > 0) {
            return;
        }

        var open_test_uuid = $(this).data().open_test_uuid;
        var link = "https://www.netztest.at/" + selectedLanguage + "/Opentest?" + open_test_uuid;
        $(this).find("td.test-platform").append("<a href='" + link + "' class='open-test-uuid'>" + link + "</a>");
    })
}

function loadHistograms(filter, measurement) {
    var speedFormatter = function(val, min, max) {
        if (val === null) {
            return "";
        }
        else {
            var nr;
            //calculate how many positions are needed
            var step = (max - min) / 1000 / 12;
            var positions = Math.ceil(Math.abs(Math.log(step) / Math.LN10));

            //if at least 1 mbit difference -> use two significant digits
            if (step > 1) {
                if (val < 1000)
                    nr = (val / 1000).formatNumber(2);
                else if (val < 10000)
                    nr = (val / 1000).formatNumber(1);
                else
                    nr = (val / 1000).formatNumber(0);
            }
            else {
                nr = (val / 1000).formatNumber(positions);
            }
            return nr + " " + Lang.getString("Mbps");
        }
    }
    
    var pingFormatter = function (val, min, max) {
        if (val === null) {
            return "";
        }
        return val + " " + Lang.getString("ms");
    };
    
    $('#histogram-' + measurement).spin();
    
    $.ajax({
        url: statisticProxy + "/" + statisticpath + "/opentests/histogram" + filter + ((filter.length > 0)?"&":"?") + "measurement=" + measurement,
        type: 'GET',
        dataType: 'json',
        statusCode: {
            404: function(data) {
                //remove the spinner
                //by calling the same function that invoked it
                //$('#spinner').spin('modal');
            },
            400: function(data) {
                //remove the spinner
                //by calling the same function that invoked it
                //$('#spinner').spin('modal');
                alert("invalid parameter");
            }
        },
        success: function(data) {
            $('#histogram-' + measurement).spin();
    
            //for each opentest in the "openTests"-table
            if (measurement === "download") {
                loadHistogram("download_kbit", data.download_kbit, speedFormatter, data.download_kbit_fine);
            }
            else if (measurement === "upload") {
                loadHistogram("upload_kbit", data.upload_kbit, speedFormatter, data.upload_kbit_fine);
            }
            else if (measurement === "ping") {
                loadHistogram("ping_ms", data.ping_ms, pingFormatter, data.ping_ms_fine);
            }
        }
    });
}

function loadHistogram(identifier, data, formatter, data_fine) {
    var fineFactor = Math.round(data_fine.length / ((data[data.length-1].upper_bound === null)?(data.length-1):data.length));

    //bars
    var bars = [];
    var max = data[data.length-2].upper_bound;
    var min = data[0].lower_bound;
    
    if (formatter === undefined) {
        formatter = function(val, min, max) {
            if (val === null) {
                return "";
            }
            //calculate how many positions are needed
            //var step = (max - min) / 1000 / 12;
            //var positions = Math.ceil(Math.abs(Math.log(step) / Math.LN10));
            return val;
        };
    }
    
    for (var i=0;i<data.length;i++) { 
        //add to array
        bars.push([i,data[i].results]);
    }

    var linePoints = [];
    var cumulated = 0;
    for (var i=0;i<data_fine.length;i++) {
        linePoints.push([i/fineFactor,cumulated]);
        cumulated += data_fine[i].results;
    }

    //now, to percent
    for (var i=0;i<linePoints.length;i++) {
        linePoints[i] = [linePoints[i][0],linePoints[i][1]/cumulated];
    }

    var placeholder = $("#histograms .histogram-" + identifier + "-graph");
    placeholder.empty();
    //set width for flot
    placeholder.css("width", $("histogram-download_kbit-graph").width() + "px");
    placeholder.css("height", histogramCanvasHeight + "px");

    //draw the plot
    var plot = $.plot(placeholder, [{
            data: bars,
            color: color_for_speed_graph,
            bars: {show: true, barWidth: 1}
        },
            {
                data: linePoints,
                color: color_for_speed_graph,
                lines: { show: true },
                yaxis: 2
            }
        ],
    {
        grid: {hoverable: true, clickable: true},
        yaxes: [
            {
                position: "left",
                tickFormatter: function (v, axis) {
                    if (v >= 1000000) {
                        if (v >= 10000000)
                        {
                            return (v / 1000000).formatNumber(0) + " " + Lang.getString("Mio_abbr");
                        } else {
                            return (v / 1000000).formatNumber(1) + " " + Lang.getString("Mio_abbr");
                        }
                    }
                    else if (v > 1000) {
                        if (v >= 10000) {
                            return (v / 1000).formatNumber(0) + " " + Lang.getString("Thou_abbr");
                        } else {
                            return (v / 1000).formatNumber(1) + " " + Lang.getString("Thou_abbr");
                        }

                    }
                    return v;
                }
            },
            {
                position: "right",
                max: 1,
                min: 0,
                tickFormatter: function(v,axis) {
                    return v*100 + "%";
                }
            }
        ],
        xaxis: {tickSize: 1,
            tickFormatter: function(v, axis) {
                //normal point
                if (data[v] !== undefined) {
                    return formatter(data[v].lower_bound, min, max);
                }
                else {
                    return "";// formatter(data[v-1].upper_bound, min, max);
                }
            }}
    });

    placeholder = $("#histograms .histogram-" + identifier + "-graph");
    $("#histograms .histogram-" + identifier + "-graph").bind("plothover", function(event, pos, item) {
        if (item !== null) {
            plot.unhighlight();
            plot.highlight(item.series, item.datapoint);
            
            //clickable if at least one result
            if (data[item.dataIndex] &&
                data[item.dataIndex].results > histogramClickableThreshold) {
                document.body.style.cursor = 'pointer';
            }
        }
        else {
            document.body.style.cursor = 'default';
            plot.unhighlight();
        }
    });

    placeholder.bind("plotclick", function(event, pos, item) {

        if (item !== null) {
            plot.unhighlight();
            plot.highlight(item.series, item.datapoint);
            
            
            var lower = data[item.dataIndex].lower_bound;
            var upper = data[item.dataIndex].upper_bound;

            //in any case, use integers
            lower = Math.round(lower);
            upper = Math.round(upper);

            //get upper and lower bound
            if (identifier === 'download_kbit' || identifier === 'upload_kbit') {
                lower=lower/1000;
                upper=upper/1000;
            }

            //get them in the form fields
            $("#" + identifier).val(lower);
            //if upper exists
            if (upper !== null && upper !== 0) {
                $("#" + identifier + "_upper").val(upper);
            } else {
                //else, use lower bound * 6 (since 12 classes)
                $("#" + identifier + "_upper").val(lower*6);
            }
            
            //clickable if at least one result
            if (data[item.dataIndex].results > histogramClickableThreshold) {
                setFilters();
            }
        } else {
            plot.unhighlight();
        }
    });
    
}

function bindTabs(filter) {      
        var showTab = function() {
                //alert(1);
                $(".tabs-content .tab-content").hide();
                $(".tabs-content .tab-content.tab-selected").show();
                //alert(2);
        };
        showTab();
        
        $(".tabs-header a").click(function() {
                var id = $(this).attr("href"); //e.g. #histogram-download
                
                //load content if not yet loaded
                if ($(id).hasClass("not-loaded")) {
                    $(id).removeClass("not-loaded")
                    loadHistograms(filter,id.substring(11));
                }
                
                $(this).closest(".accordion-list").find(".tabs-header li").removeClass("tab-selected");
                $(this).closest(".accordion-list").find(".tabs-content .tab-content").removeClass("tab-selected");
                $(id).addClass("tab-selected"); 
                $(this).parent().addClass("tab-selected");
                showTab();
                
                return false;
        });
}


function loadIntraday(filter) {
    var createPlot = function (data) {
        var download = [];
        var upload = [];
        var ping = [];
        var count = [];
        data.push($.extend({}, data[0])); //shallow copy
        data[data.length - 1].hour = 24;

        //if there is no data for a certain hour, fill with Zero
        for (var i=0;i<24;i++) {
            if (data.length < i || data[i].hour !== i) {
                data.splice(i,0,{
                    hour: i,
                    count: 0,
                })
            }
        }

        $.each(data, function (i, val) {
            if (val.count > 0) {
                download.push([val.hour, val.quantile_down / 1e3]);
                download.push([val.hour + 1, val.quantile_down / 1e3]);
                upload.push([val.hour, val.quantile_up / 1e3]);
                upload.push([val.hour + 1, val.quantile_up / 1e3]);
                ping.push([val.hour, val.quantile_ping]);
                ping.push([val.hour + 1, val.quantile_ping]);
            }
            else {
                download.push([val.hour, null]);
                upload.push([val.hour, null]);
                ping.push([val.hour, null]);
            }
            count.push([val.hour, val.count]);
        });

        data.push($.extend({}, data[0])); //shallow copy
        data[data.length - 1].hour = 24;

        var graphs = [
            {
                placeholder: $("#intraday-accordion .intraday-graph-updown"),
                data: [{
                    data: download,
                    color: color_for_speed_graph,
                    label: Lang.getString("Down")
                }, {
                    data: upload,
                    color: color_for_speed_graph_upload,
                    label: Lang.getString("Up")
                }],
                tickFormatter: function (v, axis) {

                    //format <1mbps with 2 decimal points
                    if (v > 4) {
                        return v.toFixed(0) + " " + Lang.getString('Mbps');
                    } else {
                        return v.toFixed(1) + " " + Lang.getString('Mbps');
                    }
                }
            },
            {
                placeholder: $("#intraday-accordion .intraday-graph-ping"),
                data: [{
                    data: ping,
                    color: color_for_ping_graph
                }],
                tickFormatter: function (v, axis) {
                    return (v / 1e6) + " " + Lang.getString("ms");
                }
            }
        ];

        //flot.js VOODOO (1/2): put ping in "wrong" tab for initialisation
        //$("#intraday-accordion .intraday-graph-ping").appendTo("#intraday-updown");

        $.each(graphs, function (i, graph) {
            var placeholder = graph.placeholder;
            placeholder.empty();
            //set width for flot
            placeholder.css("width", $("#intraday-accordion .intraday-graph-ping, #intraday-accordion .intraday-graph-updown").width() + "px");
            placeholder.css("height", histogramCanvasHeight + "px");


            //draw the plot
            var plot = $.plot(placeholder, [
                    {
                        data: count,
                        bars: {
                            show: true,
                            fillColor: "rgba(255, 227, 171, 0.25)"
                        },
                        yaxis: 2,
                        color: "rgba(255, 227, 171, 0.25)"
                    }].concat(graph.data),
                {
                    xaxis: {
                        min: 0,
                        max: 24,
                        tickFormatter: function (v, axis) {
                            return moment().hour(Math.floor(v)).minute((v % 1) * 60).format("H:mm");
                        }
                    }
                    , yaxes: [
                        {
                            position: "left",
                            min: 0,
                            tickFormatter: graph.tickFormatter
                        },
                        {
                            position: "right",
                            tickFormatter: function (v, axis) {
                                if (v > 1000000) {
                                    return (v / 1000000).formatNumber(1) + " " + Lang.getString("Mio_abbr");
                                }
                                else if (v > 1000) {
                                    if (v > 10000) {
                                        return (v / 1000).formatNumber(0) + " " + Lang.getString("Thou_abbr");
                                    } else {
                                        return (v / 1000).formatNumber(1) + " " + Lang.getString("Thou_abbr");
                                    }

                                }
                                return v;
                            }
                        }
                    ],
                    legend: {
                        noColumns: 2
                    }
                });
        });

        //flot.js VOODOO (1/2): put ping in "wrong" tab for initialisation
        //$("#intraday-accordion .intraday-graph-ping").appendTo("#intraday-ping");

    };


    $('#spinner').spin('modal');

    $.ajax({
        url: statisticProxy + "/" + statisticpath + "/opentests/intraday" + filter,
        type: 'GET',
        dataType: 'json',
        statusCode: {
            404: function (data) {
                //remove the spinner
                //by calling the same function that invoked it
                //$('#spinner').spin('modal');
            },
            400: function (data) {
                //remove the spinner
                //by calling the same function that invoked it
                //$('#spinner').spin('modal');
                alert("invalid parameter");
            }
        },
        success: function (data) {
            $('#spinner').spin('modal');
            createPlot(data)
        }
    });
}

var map, vectorSource, vectorLayer, markers, mapProxy;
function initializeMap() {
    //get map proxy url
    var json_data = {
        "type": test_type,
        "name": test_name
    };
    $.ajax({
        url: controlProxy + "/" + wspath + "/settings",
        type: "post",
        dataType: "json",
        contentType: "application/json",
        data: JSON.stringify(json_data),
        success: function (data) {
            mapProxy = data.settings[0].urls.url_map_server;
        }
    });
    
    
    var bases = new Array();
    bases.push(
        new ol.layer.Tile({
            source: new ol.source.OSM({
                url: osm_server + '/{z}/{x}/{y}.png'
            }),
            title: 'OpenStreetMap',
            type: 'base',
            visible: true
        })
    );
    
    vectorSource = new ol.source.Vector({});
    var currentFeatures = [];
    
    var colors = [
        'rgba(128, 128, 128, 0.9)', //undefined - 0
        'rgba(255, 0, 0, 0.9)', //red - 1
        'rgba(255, 255, 0, 0.9)', //yellow - 2
        'rgba(0, 255, 0, 0.9)', //green - 3
        'rgba(0, 153, 0, 0.9)' //dark green - 4
    ];
        
    var stylingFct = function(feature, resolution) {
        return    [new ol.style.Style({
            image: new ol.style.Circle({
                fill: new ol.style.Fill({
                    color: colors[feature.get('result').download_classification]
                }),
                stroke: new ol.style.Stroke({
                    color: 'rgba(128, 128, 128, 0.9)',
                    width: 1.25
                }),
                radius: 6
            })
        })];
    }
    
    vectorLayer = new ol.layer.Vector({
        source: vectorSource,
        style: stylingFct
    })
    
    map = new ol.Map({
        layers: bases,
        controls: ol.control.defaults({
            attributionOptions: /** @type {olx.control.AttributionOptions} */ ({
                collapsible: false
            })
        }),
        target: $('#opentests-map-container')[0],
        view: new ol.View({
            center: [0, 0],
            zoom: 2,
            maxZoom : 19
        })
    });

    //fit to Austrian border initially
    var textent = [1252344.27125, 5846515.498922221, 1907596.397450879, 6284446.2299491335];
    map.getView().fit(textent, map.getSize());
    
    map.addLayer(vectorLayer);
    
        
    markers = new ol.Overlay.Popup();
    map.addOverlay(markers);


    map.on('click', function (evt) {
        var feature = map.forEachFeatureAtPixel(evt.pixel,
                function (feature, layer) {
                    return feature;
                });
        if (feature) {
            var geometry = feature.getGeometry();
            var coord = geometry.getCoordinates();
            
            var test = feature.get("result");
            var uuid = test.open_test_uuid;
            
            //Open Popup?
            loadMarker(uuid);
        } else {
            //remove popup
            markers.hide();
        }
    });
    
    // change mouse cursor when over marker
    map.on('pointermove', function (e) {
        var pixel = map.getEventPixel(e.originalEvent);
        var hit = map.hasFeatureAtPixel(pixel);
        map.getTarget().style.cursor = hit ? 'pointer' : '';
    });
    
    //fit to Austrian border initially
    var textent = [1252344.27125, 5846515.498922221, 1907596.397450879, 6284446.2299491335];
    map.getView().fit(textent, map.getSize());
    
    //load test results
    var currentFirstTestUUID = null;
    
    window.setTimeout(function() {
        map.updateSize();
    },1)
    $(window).resize(function() {
        map.updateSize();
    })
    $(".menu-trigger #trigger").click(function() {
        //resize whenever mobile menu is opened/closed
        window.setTimeout(function() {
            map.updateSize();
        },10);
        window.setTimeout(function() {
            map.updateSize();
        },200); 
        window.setTimeout(function() {
            map.updateSize();
        },500); 
    })
}

function addTestToMap(test) {
    var convertLongLatToOpenLayersPoint = function (long, lat) {
        return ol.proj.transform([long, lat],
                'EPSG:4326', 'EPSG:3857');
    }
    
    if (test.long === null) {
        return;
    }

    var coords = convertLongLatToOpenLayersPoint(test.long, test.lat);
    var feature = new ol.Feature({
        geometry: new ol.geom.Point(coords),
        result: test
    });
    vectorSource.addFeature(feature);
}

function panMapToShowTests() {
    var extent = vectorLayer.getSource().getExtent();
    map.getView().fit(extent, map.getSize());
}

//add datetime helper
Handlebars.registerHelper('formatDate', function (timestamp) {
    var d = new Date(timestamp);
    return moment(d).format(Lang.getString('map_dateformat'));
});

function addMarkerV3(lat, lon, data) {
    var coordinate = [lat, lon];
    markers.setPosition(coordinate);

    var template = Handlebars.compile($("#markerTemplate").html());
    var html = template({
        data: data
    });

    
    markers.show(coordinate, html);
}


function loadMarker(openTestUUID) {
    var json_data = {
        language: selectedLanguage,
        open_test_uuid: openTestUUID.substring(1)
    };
    json_data = addCapabilities(json_data);

    $.ajax({
        //url : "http://localhost:8080/RMBTMapServer/tiles/markers",
        url: mapProxy + "/tiles/markers",
        type: "post",
        dataType: "json",
        contentType: "application/json",
        data: JSON.stringify(json_data),
        success: function (data, textStatus, jqXHR) {
            if (data.measurements && data.measurements[0]) {
                addMarkerV3(data.measurements[0].lat, data.measurements[0].lon, data.measurements);
            }
        },
        error: function (xhr, ajaxOptions, thrownError) {
            alert("Error beim settings-Abruf " + xhr.status + " " + thrownError + " " + ajaxOptions);
        }
    });
}

/**
 * Sorts all results by the given criteria; 
 * alternates between ascending and descending order
 * called by onclick-events in the result table columns
 * @param {String} criteria the allowed criteria (see control-server specification)
 * @returns {String} the new search string
 */ 
function sortResultsBy(criteria) { 
    var order; 
    if (getURLParameter("sort_order") !== "null") {
        order = getURLParameter("sort_order");
        if (order === "asc")
            order = "desc"
        else
            order = "asc"
    } 
    else {
        order = "desc";
    }
    
    //cache search-url
    var search = location.search; 
    
    //remove cursor
    search = setURLParameter("cursor","",search);
    search = search.replace("?cursor=","");
    search = search.replace("&cursor=","");
    
    search = setURLParameter("sort_by",criteria,search);
    search = setURLParameter("sort_order",order,search);
    location.search = search;
}

/**
 * Gets the value for a GET-Parameter
 * @param {String} name name of the parameter
 * @param {String} searchUrl optional, the url
 * @returns {String} the value or "null" (as string)
 */
//https://gist.github.com/MarkVaughn/2096943
function getURLParameter(name, searchUrl) {
    if (searchUrl === undefined) {
        searchUrl = location.search;
    }
    name = name.replace("[","(\\[|%5B)");
    name = name.replace("]","(\\]|%5D)");
    var matches = RegExp('[?|&]' + name + '=' + '(.+?)(&|$)').exec(searchUrl);
    var ret = "null";
    if (matches) {
        ret = decodeURIComponent(matches[matches.length - 2]);
    }
    return ret;
}

/**
 * Sets the value for a GET-Parameter
 * @param {String} name : name of the parameter
 * @param {type} value : value of the parameter
 * @param {type} searchUrl : optional, the url
 * @returns {String}: the resulting url
 */
//https://gist.github.com/MarkVaughn/2096943
function setURLParameter(name, value, searchUrl) {
    if (searchUrl === undefined) {
        searchUrl = location.search;
    }
    var search;
    name = encodeURIComponent(name);
    if (getURLParameter(name,searchUrl) !== "null") {
        search = searchUrl.replace(new RegExp('([?|&]' + name + '=)' + '(.+?)(&|$)'), "$1" + encodeURIComponent(value) + "$3");
    } else if (searchUrl.length) {
        search = searchUrl + '&' + name + '=' + encodeURIComponent(value);
    } else {
        search = '?' + name + '=' + encodeURIComponent(value);
    }
    return search;
    //History.pushState({state: History.getStateId() + 1}, document.title, search);
}

/**
 * Sets possible values for the longer < select>-Fields
 */
function loadPossibleFilterValues() {
    var html = "";
    for (var i=0;i<possibleClientVersions.length;i++) {
        html += "<option value='" + possibleClientVersions[i][1] + "'>" + possibleClientVersions[i][0] + "</option>";
    }
    $("#client_version").append(html);
    
    html = "";
    for (var i=0;i<possibleConnectionTypes.length;i++) {
        html += "<option>" + possibleConnectionTypes[i] + "</option>";
    }
    $("#cat_technology").append(html);

    html = "";
    for (var i=0;i<possibleLandCoverValues.length;i++) {
        html += "<option value=\"" + possibleLandCoverValues[i] + "\">" + possibleLandCoverValues[i] + " - " + Lang.getString("corine_" + possibleLandCoverValues[i]) + "</option>";
    }
    $("#land_cover").append(html);

    /* html = "";
    for (var i=0;i<possibleNetworkTypes.length;i++) {
        html += "<option>" + possibleNetworkTypes[i] + "</option>";
    }
    $("#network_type").append(html); */
    
    html = "";
    var possibleSimCountries = Lang.getString('countries');
    $.each(possibleSimCountries,function(key,value) {
        html += "<option value='" + key + "'>" + value + "</option>";
    });

    $("#sim_country").append(html);
    $("#network_country").append(html);
    $("#country_geoip").append(html);
    $("#country_location").append(html);

    html = "";
    var date = new Date();
    for (var i=2012;i<=date.getFullYear();i++) {
        html += "<option value='" + i + "'>" + i + "</option>";
    }
    $("#time_year").append(html);
    
    for (var i=1;i<=366;i++) {
        $("#time_interval_count").append("<option>" + i + "</option>")
    }
}

/**
 * Sets the value from the input element given in "from" as
 * standard value in the input element with the same is as
 * "from" appended with "_upper"
 * @param {DOMElement} from
 */
function copyValueToUpper(from) {
    var id = $(from).attr("id");
    //if ($("#" + id + "_upper").val() === "") {
        $("#" + id + "_upper").attr("placeholder",$(from).val());
    //}
}

/**
 * Sets the new search filters to a new search url and loads the resulting document
 */
function setFilters() {
    var newSearchUrl = "";
    $("#advanced-search input[id], #advanced-search select").each(function() {
       var id = $(this).attr("id");
       var val = $(this).val();

       //trim the value, if it is a string
        if (typeof val === "string") {
            val = val.trim();
        }

       //_upper-fields are processed along with the lower field
       if ((id.indexOf("_upper") > 0) || id.indexOf("time") >= 0 || id.indexOf("date") >= 0 || val === "" || val === 0 || val === "select" || val === null) {
           return; //=continue
       }

       //multiply download/upload with 1000
       if (id.indexOf("download") >= 0|| id.indexOf("upload") >= 0) {
           val = Math.round(val * 1000);
       }
           
       
       //if there is an upper-field: special handling
       if ($("#advanced-search #" + id + "_upper").length > 0) {
           var upper = "#" + id + "_upper";
           var upperVal = $(upper).val();
           //multiply download/upload with 1000
           if (id.indexOf("download") >= 0|| id.indexOf("upload") >= 0) 
                upperVal = upperVal*1000;
                
           //if its the same value or the second field is empty => no array
           if (upperVal === "" || upperVal === 0 
                || upperVal === val) {
                newSearchUrl = setURLParameter(id,val,newSearchUrl);
           } 
           else {
                //set upper and lower   
                newSearchUrl = setURLParameter(id + "[]",">" + val + "amp" + id + "brackets<" + upperVal,newSearchUrl);
                newSearchUrl = newSearchUrl.replace("amp","&");
                newSearchUrl = newSearchUrl.replace("brackets","%5B%5D=");
           }    
       } else {
           //just set the parameter
           newSearchUrl = setURLParameter(id,val,newSearchUrl);
            
       }
    });
    
    /*//radio fields
    $("#advanced-search input[type=radio]:selected").each(function() {
        var id = $(this).attr("name");
        var val = $(this).val();
        if (val !== "" && val !== "any") {
            newSearchUrl = setURLParameter(id, val, newSearchUrl);
        }
    })*/
    
    //set time if there is any
    var getDate = function(dateID,timeID) {
        var date = $(dateID).val();
        var time = $(timeID).val();
        if (time === undefined || time === null || time === "") {
            time = "00:00:00";
        }
        
        if (date !== undefined && date !== null && date !== "") {
            if (time.length === 7) {
                time = "0" + time;
            }
            
            date = moment(date + " " + time, "YYYY-MM-DD HH:mm:ss");
            return date.utc().format("YYYY-MM-DD HH:mm:ss");
        }
        return null;
    };
    
    var beginDate = getDate("#dateA","#timeA");
    var endDate = getDate("#dateB","#timeB");
    if (beginDate && endDate) {
        newSearchUrl = setURLParameter("time[]",">" + beginDate + "amp" + "timebrackets<" + endDate,newSearchUrl);
        newSearchUrl = newSearchUrl.replace("amp","&");
        newSearchUrl = newSearchUrl.replace("brackets","%5B%5D=");
    }
    else if (beginDate) {
        newSearchUrl = setURLParameter("time[]",">" + beginDate, newSearchUrl);
    }
    else if (endDate) {
        newSearchUrl = setURLParameter("time[]","<" + endDate, newSearchUrl);
    }   

    if (useSessionStorage) {
        //if we use session storage - continue to use, but remove the leading questionmark
        window.sessionStorage.setItem("opentests_query", newSearchUrl.substr(1));
        location.reload();
    }
    else {
        location.search = newSearchUrl;
    }
}

/**
 * Extracts all applied filters from the url and
 * inserts them in the search-form so the user
 * can see, if the results are filtered
 */
function loadParametersFromUrl(filter) {
    var filters = 0;
    var expertFilters = 0;
    
    //iterate for every available field rather than for every
    //get parameter (because there are no fields for "cursor", "lat", etc.
    $("#advanced-search input, #advanced-search select").each(function() {
       var id = $(this).attr("id");
       if (id.indexOf("_upper") === -1) {
           $(this).val("1");
           $(this).val("");
           $("#" + id + "_upper").val("1");
           $("#" + id + "_upper").val("");
       }
       
       var val = getURLParameter(id,filter);
       var upperVal = "";
       if (val === "null") {
           val = getURLParameter(id + "[]",filter); //since getURLParameter uses RegEx, . for brackets
           
           //also get the upper value
           if (val !== "null") {
               upperVal = getURLParameter(id + "[]", filter.substr(filter.indexOf(id) +1));
           }
       }
       
       //no parameter set for that specific field
       if (val === "null")
           return; //=continue
       
       for (var i=0;i<2;i++) {
           if (i===1) {
               val = upperVal;
           }
           if (val === "null" || val === "" || val === 0) {
               continue;
           }
       
            //divide download/upload by 1000
            if (val.indexOf(">") === 0) {
                val = val.substr(1);
                if (id.indexOf("download") >= 0|| id.indexOf("upload") >= 0) 
                     val = val/1000;
                $(this).val(val);
            }
            else if (val.indexOf("<") === 0) {
                val = val.substr(1);
                if (id.indexOf("download") >= 0|| id.indexOf("upload") >= 0) 
                     val = val/1000;
                $("#" + id + "_upper").val(val);
            } 
            else {
                if (id.indexOf("download") >= 0|| id.indexOf("upload") >= 0) 
                     val = val/1000;
                $(this).val(val);
            };
       }
       
       if ($(this).parents().filter("#expert_filters").length > 0) {
           expertFilters++;
       }
       filters++;
    });
    
    //if time is set => get filters
    var setTimeFields = function (val) {
        if (val !== "null") {
            var date;
            var comp = val.substr(0, 1); //comperator
            val = val.substr(1); //cut comperator

            //if its java-date => get from there
            if (val.indexOf(":") === -1)
                date = new Date(parseInt(val));
            else {
                val = formatOpenDataDateToLocalTime(val); //convert to local time from utc
                date = new Date(val.substr(0, 4), parseInt(val.substr(5, 2) - 1), val.substr(8, 2), val.substr(11,2), val.substr(14,2), val.substr(17,2));
            }

            //set field accordingly
            var fieldID = (comp === ">") ? "A" : "B";
            $("#date" + fieldID).val(moment(date).format("YYYY-MM-DD"));
            $("#time" + fieldID).val(moment(date).format("HH:mm:ss"));

            filters++;
        }
    }
    var date = getURLParameter("time[]",filter); //again, .. instead of brackets for regex
    if (date === "null") { date = getURLParameter("time",filter); }
    if (date !== "null") {
        setTimeFields(date);
        date = getURLParameter("time[]",filter.substr(filter.indexOf("time")+1));
        if (date) {
            setTimeFields(date);
        }
        
        
        //find out if time fields constitute an valid interval
        (function (dateA, timeA, dateB, timeB) {
            //if no begin date -> no interval
            if ($(dateA).val() === "" || $(dateA).val() === null) {
                return;
            }
            dateA = moment($(dateA).val() + " " + $(timeA).val(), "YYYY-MM-DD HH:mm:ss");
            
            if ($(dateB).val() === "" || $(dateB).val() === null) {
                dateB = moment().endOf("day");
            }
            else {
                dateB = moment($(dateB).val() + " " + $(timeB).val(), "YYYY-MM-DD HH:mm:ss");
            }

            //set interval fields if the time constitutes a valid interval (d/m/y)
            $.each(["days", "months", "years"], function (i, val) {
                var diff = dateB.diff(dateA, val, true);
                if (diff > 0.9 &&
                        (Math.abs(diff % 1) < 0.01 || Math.abs(diff % 1) > 0.99)) {
                    $("#time_interval_type").val(val);
                    $("#time_interval_count").val(Math.round(diff));

                } else {
                    return false;
                }
            });
        })("#dateA", "#timeA", "#dateB", "#timeB");
    }
    
    
    //display filter count to the user
    if (filters>0)
        $("#advanced-search-filter-count").html("(" + filters + ")");
    
    if (expertFilters>0)
        $("#expert_filters_count").html("(" + expertFilters + ")");
}

/**
 * Gets the day count for a specific month in #time_day
 * taking no account for leap years
 * called by onchange-events in the month-dropdowns
 * @param {int} month
 *
function setDaysFor(month) {
    var selected = $("#time_day").val();
    month = parseInt(month);
    var maxdays = 30;
    switch (month) {
        case 1:
        case 3:
        case 5:
        case 7:
        case 8:
        case 10:             
        case 12:             
            maxdays = 31;
            break;
        case 2:
            maxdays = 28; //no tests in leap years for now
            break;
    }
    $("#time_day").empty();
    $("#time_day").append("<option value='select'>--</option>");
    for (var i=1;i<=maxdays;i++) {
        $("#time_day").append("<option value='" + pad(i,2) + "'>" + i + "</option>");
    }
    
    $("#time_day").val(selected); //restore selected day if possible
} */

/**
 * removes the "signal strength"-column if there is to less space on the device
 */
function adjustTablesToWindowSize() {
    var device_width = $("div.uk-container").width();
    //decide which table to display as follows:
    //if device-width is large enough => display normal table
    //if device-width is too small for that but large enough for short provider names => display table_short
    //else: display table with captions inbetween
    $("#verlauf td.test-network-signal").show();
    $("#verlauf th.test-network-signal").show();
    if (device_width < $("#verlauf").width()) {
        $("#verlauf td.test-network-signal").hide();
        $("#verlauf th.test-network-signal").hide();
    } 
    //alert(device_width + " -- " + $("#verlauf").width());
}


/**
 * Adjusts the date begin-Fields to match the time period selected
 */
function adjustBeginDateFromPeriod() {
    //adjust values
    var cntField = $("#time_interval_count");
    var typeField = $("#time_interval_type");
    var selectedType = typeField.val();
    var selectedCnt = cntField.val();
    
    var maxValues= {
        "days" : 366,
        "months": 120,
        "years" : 10
    }
    
    if (selectedType === "" || selectedType === null) {
        return;
    }
    
    //update count field if invalid for selection (#fields + "all"-placeholder)
    if (cntField.children().length !== (maxValues[selectedType]+1)) {
        $("#time_interval_count")[0].selectize.destroy()
        
        if (selectedCnt > maxValues[selectedType]) {
            selectedCnt = maxValues[selectedType];
        }
    
        
        cntField.empty();
        cntField.append("<option value=''>- " + Lang.getString("all") + " -</option>");
        for(var i=1;i<=maxValues[selectedType];i++) {
            cntField.append("<option>"+i+"</opton>");
        }
        
        //preserve selected value
        cntField.val(selectedCnt);
        
        //update selectize
        cntField.selectize();
    }
    
    if (selectedCnt === "" || selectedCnt === null) {
        return;
    }
    
    //calculate begin date
    var endDate = $("#dateB").val();
    if (endDate !== undefined && endDate !== null && endDate !== "") {
        var timeString = $("#timeB").val();
        if (timeString === undefined || timeString === null || timeString === "") {
            timeString = "00:00:00";
        }
        endDate = moment(endDate + " " + timeString,"YYYY-MM-DD HH:mm:ss").endOf("second");
    }
    else {
        endDate = moment().endOf("day");
    }
    
    var beginDate = moment(endDate).subtract(selectedCnt,selectedType).add(1,"milliseconds");
    console.log(beginDate);
    
    //set begin date field
    $("#dateA").val(beginDate.format("YYYY-MM-DD"));
    $("#timeA").val(beginDate.format("HH:mm:ss"));
}